/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Layer definitions

#define BASE 0
#define SYM 1
#define EXT 2
#define FNC 3
#define SYM2 4
#define ACCENT 5
#define SETTINGS 6

// -----------------

&sk {
    // don't release mods on other mods presses

    ignore-modifiers;
};

/ {
    behaviors {
        // Enables holding the first mod-tap key
        // by performing a tap-release-hold sequence.
        // To use it: "&qt KEYCODE1 KEYCODE2"

        qt: quick_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "QUICK_TAP";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 33>;
            hold-trigger-on-release;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33 30>;
            hold-trigger-on-release;
        };

        morph_num_func: morph_num_func {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_NUM_FUNC";
            bindings = <&mo 1>, <&mo 2>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        // sometimes my device thinks a modifier is being held down
        // pressing all modifiers fixes it.

        unstick: unstick {
            label = "ZM_unstick";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT &kp RSHIFT &kp LCTRL &kp RCTRL &kp LALT &kp RALT &kp LGUI &kp RGUI>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // both right thumb keys
        // internal-left & external-right thumb keys
        // both left thumb keys
        // left index & middle fingers (home-row)
        // hold control & space for Adobe workflow

        combo_fw {
            bindings = <&sl 4>;
            key-positions = <0 24>;
        };

        combo_enter_r {
            bindings = <&kp ENTER>;
            key-positions = <16 17 18>;
        };

        combo_backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <6 7>;
        };

        combo_delete {
            bindings = <&kp DEL>;
            key-positions = <8 7>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <3 2>;
        };

        combo_enter_left {
            bindings = <&kp ENTER>;
            key-positions = <13 12 11>;
        };

        combo_esc {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // Base alpha layer

        default_layer {
            label = "Base";
            bindings = <
&kp Q            &kp W         &kp F          &kp P            &kp B      &kp J      &kp L        &kp U          &kp Y             &kp RA(W)
&hml LEFT_ALT A  &hml LCTRL R  &hml LSHIFT S  &hml LGUI T      &kp G      &kp M      &hmr RGUI N  &hmr RSHIFT E  &hmr RCTRL RA(O)  &hmr RALT RA(A)
&kp Z            &kp X         &kp C          &kp D            &kp V      &kp K      &kp H        &kp O          &kp I             &kp APOS
                                              &morph_num_func  &kp SPACE  &kp SPACE  &mo 3
            >;
        };

        num {
            bindings = <
&trans  &trans  &mt AMPS N7  &mt STAR N8   &mt LPAR N9   &trans  &trans  &trans  &trans  &trans
&trans  &trans  &mt DLLR N4  &mt PRCNT N5  &mt CARET N6  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &mt EXCL N1  &mt AT N2     &mt HASH N3   &trans  &trans  &trans  &trans  &trans
                             &trans        &mt RPAR N0   &trans  &trans
            >;
        };

        func {
            bindings = <
&trans  &trans  &kp F7      &kp F8      &kp F9   &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp F4      &kp F5      &kp F6   &trans  &trans  &trans  &trans  &trans
&trans  &trans  &mt F11 F1  &mt F12 F2  &kp F3   &trans  &trans  &trans  &trans  &trans
                            &trans      &kp F10  &trans  &trans
            >;
        };

        sym_nav {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &mt UNDER MINUS  &mt LBRC LBKT  &mt RBRC RBKT  &kp LPAR        &kp RPAR
&trans  &trans  &trans  &trans  &trans  &mt COLON SEMI   &kp LEFT       &kp DOWN       &kp UP          &kp RIGHT
&trans  &trans  &trans  &trans  &trans  &mt PLUS EQUAL   &mt LT COMMA   &mt GT DOT     &mt QMARK FSLH  &mt PIPE BSLH
                        &trans  &trans  &trans           &trans
            >;
        };

        fw {
            bindings = <
&trans       &trans  &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans
&bt BT_CLR   &trans  &bt BT_SEL 4  &trans        &trans        &trans  &trans  &trans  &trans  &bt BT_CLR
&bootloader  &trans  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &trans  &trans  &trans  &trans  &bootloader
                                   &trans        &bt BT_SEL 0  &trans  &trans
            >;
        };
    };
};
