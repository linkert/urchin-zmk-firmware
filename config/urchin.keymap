/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Layer definitions

#define BASE 0
#define SYM 1
#define EXT 2
#define FNC 3
#define SYM2 4
#define ACCENT 5
#define SETTINGS 6

// -----------------

&sk {
    // don't release mods on other mods presses

    ignore-modifiers;
};

/ {
    behaviors {
        // Enables holding the first mod-tap key
        // by performing a tap-release-hold sequence.
        // To use it: "&qt KEYCODE1 KEYCODE2"

        qt: quick_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "QUICK_TAP";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
        };

        modsRight: modsRight {
            compatible = "zmk,behavior-hold-tap";
            label = "MODSRIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 31 32>;
            hold-trigger-on-release;
            require-prior-idle-ms = <150>;
        };

        modsLeft: modsLeft {
            compatible = "zmk,behavior-hold-tap";
            label = "MODSLEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 31>;
            hold-trigger-on-release;
            require-prior-idle-ms = <150>;
        };

        morph_numFunc: morph_numFunc {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_NUMFUNC";
            bindings = <&mo 1>, <&mo 2>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        morph_symNav: morph_symNav {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_SYMNAV";
            bindings = <&mo 3>, <&mo 4>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        // sometimes my device thinks a modifier is being held down
        // pressing all modifiers fixes it.

        unstick: unstick {
            label = "ZM_unstick";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT &kp RSHIFT &kp LCTRL &kp RCTRL &kp LALT &kp RALT &kp LGUI &kp RGUI>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // both right thumb keys
        // internal-left & external-right thumb keys
        // both left thumb keys
        // left index & middle fingers (home-row)
        // hold control & space for Adobe workflow

        combo_fw {
            bindings = <&sl 5>;
            key-positions = <0 24>;
        };

        combo_enter_r {
            bindings = <&kp ENTER>;
            key-positions = <27 26>;
        };

        combo_backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <7 6>;
        };

        combo_delete {
            bindings = <&kp DEL>;
            key-positions = <7 8>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <2 1>;
        };

        combo_enter_l {
            bindings = <&kp ENTER>;
            key-positions = <22 23>;
        };

        combo_esc {
            bindings = <&kp ESC>;
            key-positions = <3 2>;
        };

        combo_capsword {
            bindings = <&caps_word>;
            key-positions = <31 32>;
        };

        combo_grave {
            bindings = <&mt TILDE GRAVE>;
            key-positions = <0 1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // Base alpha layer

        base {
            bindings = <
&kp Q               &kp W             &kp F             &kp P           &kp B                 &kp J                    &kp L          &kp U              &kp Y              &kp RA(W)
&modsLeft LSHIFT A  &kp R             &modsLeft LGUI S  &kp T           &kp G                 &kp M                    &kp N          &modsRight RGUI E  &kp RA(O)          &modsRight RA(RSHIFT) RA(A)
&modsLeft LCTRL Z   &modsLeft LALT X  &kp C             &kp D           &kp V                 &kp K                    &kp H          &kp O              &modsRight RALT I  &modsRight RCTRL SQT
                                                        &morph_numFunc  &modsLeft LGUI SPACE  &modsRight RSHIFT SPACE  &morph_symNav
            >;
        };

        numFunc {
            bindings = <
&trans  &mt AMPS N7  &mt STAR N8   &mt LPAR N9   &mt RPAR N0  &trans  &trans  &trans  &trans  &trans
&trans  &mt DLLR N4  &mt PRCNT N5  &mt CARET N6  &trans       &trans  &trans  &trans  &trans  &trans
&trans  &mt EXCL N1  &mt AT N2     &mt HASH N3   &trans       &trans  &trans  &trans  &trans  &trans
                                   &trans        &trans       &trans  &trans
            >;
        };

        numFunc_alt {
            bindings = <
&trans  &kp F7  &kp F8  &kp F9  &kp F10  &trans  &trans  &trans  &trans  &trans
&trans  &kp F4  &kp F5  &kp F6  &kp F11  &trans  &trans  &trans  &trans  &trans
&trans  &kp F1  &kp F2  &kp F3  &kp F12  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans   &trans  &trans
            >;
        };

        symNav {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &mt UNDER MINUS  &mt LBRC LBKT  &mt RBRC RBKT  &kp LPAR        &kp RPAR
&trans  &trans  &trans  &trans  &trans  &mt COLON SEMI   &kp LEFT       &kp DOWN       &kp UP          &kp RIGHT
&trans  &trans  &trans  &trans  &trans  &mt PLUS EQUAL   &mt LT COMMA   &mt GT DOT     &mt QMARK FSLH  &mt PIPE BSLH
                        &trans  &trans  &trans           &trans
            >;
        };

        symNav_alt {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &mt UNDER MINUS  &mt LBRC LBKT  &mt RBRC RBKT  &kp LPAR        &kp RPAR
&trans  &trans  &trans  &trans  &trans  &mt COLON SEMI   &kp HOME       &kp PG_DN      &kp PG_UP       &kp END
&trans  &trans  &trans  &trans  &trans  &mt PLUS EQUAL   &mt LT COMMA   &mt GT DOT     &mt QMARK FSLH  &mt PIPE BSLH
                        &trans  &trans  &trans           &trans
            >;
        };

        fw {
            bindings = <
&none        &none         &none         &none         &bt BT_CLR  &bt BT_CLR  &none  &none  &none  &none
&none        &bt BT_SEL 3  &bt BT_SEL 4  &none         &none       &none       &none  &none  &none  &none
&bootloader  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &none       &none       &none  &none  &none  &bootloader
                                         &to 0         &none       &none       &to 0
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
